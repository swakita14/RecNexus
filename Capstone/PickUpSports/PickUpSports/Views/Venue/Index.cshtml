@model PickUpSports.Models.ViewModel.VenueController.SearchVenueViewModel
@{
    ViewBag.Title = "Sports Venues";
}

<div id="map"></div>

@using (Html.BeginForm("Filter", "Venue", FormMethod.Post))
{
    <div class="container">
        <div class="row">
            <div class="form-box">
                <h2>Sports Venues and Fields</h2>
                <form role="form">
                    @* Store all venues *@
                    @for (var i = 0; i < Model.Venues.Count; i++)
                    {
                        @Html.HiddenFor(x => x.Venues[i].VenueId)
                        @Html.HiddenFor(x => x.Venues[i].Name)
                        @Html.HiddenFor(x => x.Venues[i].Address1)
                        @Html.HiddenFor(x => x.Venues[i].City)
                        @Html.HiddenFor(x => x.Venues[i].State)
                        @Html.HiddenFor(x => x.Venues[i].ZipCode)
                        @Html.HiddenFor(x => x.Venues[i].AverageRating)
                        @Html.HiddenFor(x => x.Venues[i].Phone)
                    }

                    @* Search field *@
                    <div class="form-group">
                        <div class="input-group">
                            @if (String.IsNullOrEmpty(Model.Search))
                            {
                                <input type="text" class="form-control" name="Search" placeholder="Search Venues">

                            }
                            else
                            {
                                <input type="text" class="form-control" name="Search" placeholder="@Model.Search">
                            }
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="submit">Search</button>
                            </span>
                        </div>
                    </div>

                    @* Date and time field *@
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-3">
                                @Html.DropDownList("Day", new SelectList(Enum.GetValues(typeof(DayOfWeek)), Model.Day), new { @class = "form-control" })
                            </div>
                            <div class="col-sm-6">
                                @if (string.IsNullOrEmpty(Model.Time))
                                {
                                    <input type="text" class="form-control" placeholder="Enter time (Ex: 09:00)" name="Time" pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]">
                                }
                                else
                                {
                                    <input type="text" class="form-control" placeholder="@Model.Time" name="Time" pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]">
                                }
                            </div>
                            <div class="col-sm-3">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Time">Filter by Time</button>
                            </div>
                        </div>

                    </div>

                    @* Other filter fields *@
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-6">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Distance">Filter by Distance</button>
                            </div>
                            <div class="col-sm-6">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Rating">Filter by Rating</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <center>
                            @Html.ActionLink("Reset all filters", "Index")
                        </center>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@* Venue list *@
<h4 id="warning">@ViewBag.Error</h4>
@if (Model.Venues.Count > 0)
{
    <ul class="rolldown-list" id="myList">
        <li>
            @foreach (var venue in Model.Venues)
            {
                <input type="hidden" value="@venue.VenueId" id="mapIn"/>
                <div class="container">
                    <div class="row">
                        @Html.DisplayFor(model => venue.Name)
                    </div>
                    <div class="row">
                        @Html.DisplayFor(model => venue.Address1), @Html.DisplayFor(model => venue.City), @Html.DisplayFor(model => venue.State), @Html.DisplayFor(model => venue.ZipCode)
                    </div>
                    <div class="row">
                        @Html.DisplayFor(model => venue.Phone)
                    </div>
                    <div class="row">
                        Average rating: @Html.DisplayFor(model => venue.AverageRating)
                    </div>

                    <div class="row">
                        <br/>@Html.ActionLink("Click here for details", "Details", new {id = venue.VenueId})
                    </div>

                </div>
                <hr/>
            }
        </li>
    </ul>
}

<script>
    var x = document.getElementById("demo");

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        var lat = position.coords.latitude;
        var long = position.coords.longitude;
        jQuery.ajax({
            type: "POST",
            url: "@Url.Action("Index", "Venue")",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ curLat: lat, curLong: long, sortBy: "Distance" }),
            success: function(data) {
                alert(data);
            },
            failure: function(errMsg) {
                alert(errMsg);
            }
        });
    }

    getLocation();

</script>
<script>
    
    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'),
            {
                center: { lat: -25.344, lng: 131.036 },
                zoom: 10
            });

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                map.setCenter(pos);
            });
        }
    }
    
    function ajax_call() {
        var id = document.getElementById("mapIn").value;
        $.ajax({
            type: 'GET',
            datType: 'json',
            url: '/Venue/MapResult/' + id,
            data: { id: id },
            success: displayResults,
            error: errorOnAjax


        });
        console.log(id);
    }

    function displayResults(data) {
        var marker, i;
        for (i = 0; i < data.length; i++) {
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(data[1], data[0]),
                map: map
            });
            console.log(marker);
        };

        console.log(data);
    }

    function errorOnAjax() {
        console.log("Ajax Error");
    }

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB5bwiGQe1zyt3pWzQ9scBzcwOJyFJDsMQ&callback=initMap"></script>



