@using PickUpSports.Services
@model PickUpSports.Models.ViewModel.VenueController.SearchVenueViewModel
@{
    ViewBag.Title = "Sports Venues";
    TempData["Venues"] = @Model.Venues;
}

<div id="map"></div>

@using (Html.BeginForm("Filter", "Venue", FormMethod.Post))
{
    <div class="container">
        <div class="row">
            <div class="form-box">
                <h2>Sports Venues and Fields</h2>
                    @* Store user's current position *@
                    @Html.HiddenFor(x => x.CurrentLatitude)
                    @Html.HiddenFor(x => x.CurrentLongitude)

                    @* Search field *@
                    <div class="form-group">
                        <div class="input-group">
                            @if (String.IsNullOrEmpty(Model.Search))
                            {
                                <input type="text" class="form-control" name="Search" placeholder="Search Venues">
                            }
                            else
                            {
                                <input type="text" class="form-control" name="Search" placeholder="@Model.Search">
                            }
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="submit">Search</button>
                            </span>
                        </div>
                    </div>

                    @* Date and time field *@
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-3">
                                @Html.DropDownList("Day", new SelectList(Enum.GetValues(typeof(DayOfWeek)), Model.Day), new { @class = "form-control" })
                            </div>
                            <div class="col-sm-6">
                                @if (string.IsNullOrEmpty(Model.Time))
                                {
                                    <input type="text" class="form-control" placeholder="Enter time (Ex: 09:00)" name="Time" pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]">
                                }
                                else
                                {
                                    <input type="text" class="form-control" placeholder="@Model.Time" name="Time" pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]">
                                }
                            </div>
                            <div class="col-sm-3">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Time">Filter by Time</button>
                            </div>
                        </div>

                    </div>

                    @* Other filter fields *@
                    <div class="form-group">
                        <div class="row">
                            <div class="col-sm-6">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Distance">Filter by Distance</button>
                            </div>
                            <div class="col-sm-6">
                                <button class="btn btn-default btn-block" type="submit" name="Filter" value="Rating">Filter by Rating</button>
                            </div>
                        </div>
                    </div>

                <div class="form-group">
                    <center>
                        @Html.ActionLink("Reset all filters", "Index")
                    </center>
                </div>
                </div>
        </div>
    </div>
}

@* Venue list *@
<h4 id="warning">@ViewBag.Error</h4>
@if (Model.Venues.Count > 0)
{
    <ul class="rolldown-list" id="myList">
        <li>
            @foreach (var venue in Model.Venues)
            {
                <div class="container">
                    <div class="row">
                        @Html.DisplayFor(model => venue.Name)
                    </div>
                    <div class="row">
                        @Html.DisplayFor(model => venue.Address1), @Html.DisplayFor(model => venue.City), @Html.DisplayFor(model => venue.State), @Html.DisplayFor(model => venue.ZipCode)
                    </div>
                    <div class="row">
                        @Html.DisplayFor(model => venue.Phone)
                    </div>
                    <div class="row">
                        Average rating: @Html.DisplayFor(model => venue.AverageRating)
                    </div>

                    <div class="row">
                        <br/>@Html.ActionLink("Click here for details", "Details", new {id = venue.VenueId})
                    </div>

                </div>
                <hr/>
            }
        </li>
    </ul>
}

<script type="text/javascript">
function initMap() {
    var map = new google.maps.Map(document.getElementById('map'),
        {
            center: {lat: @Model.CurrentLatitude, lng: @Model.CurrentLongitude},
            zoom: 12
        });
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            map.setCenter(pos);
        });
    }
    @foreach (var venue in Model.Venues)
    {
        <text>
            //var map = new google.maps.Map(document.getElementById("map"));
            var URL = "https://pickupsports-production.azurewebsites.net/Venue/Details/" + @venue.VenueId;
            var marker = new google.maps.Marker({
                map: map,
                position: new google.maps.LatLng(@venue.LatitudeCoord, @venue.LongitudeCoord),
                title:"@venue.Name",
                url: URL
            });
            google.maps.event.addListener(marker,'click',function() {
                window.location.href = this.url;
            });
        </text>

    }
}
</script>
<script type="text/javascript" src="../../Scripts/jquery-3.3.1.min.js"></script>
<script type="text/javascript" src="../../Scripts/orderByDistance.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB5bwiGQe1zyt3pWzQ9scBzcwOJyFJDsMQ&callback=initMap"></script>

 


